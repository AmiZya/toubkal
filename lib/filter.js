/*  filter.js

    Copyright (C) 2013, 2014, Connected Sets

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
"use strict";

( function( exports ) {
  var XS;
  
  if ( typeof require === 'function' ) {
    XS = require( './xs.js' ).XS;
    
    require( './code.js' );
    require( './pipelet.js' );
  } else {
    XS = exports.XS;
  }
  
  var log      = XS.log
    , Code     = XS.Code
    , Pipelet  = XS.Pipelet
    , Query    = XS.Query
  ;
  
  var push = Array.prototype.push;
  
  /* -------------------------------------------------------------------------------------------
     de&&ug()
  */
  var de = true;
  
  function ug( m ) {
    log( "xs filter, " + m );
  } // ug()

  /* -------------------------------------------------------------------------------------------
     parse_filter( f )
     
     A trivial function code parser for the pipelet filter(). It is used to inline filter
     functions within unrolloed loops generated by filter().
     
     Parameters:
       - f: (Function) a filter function to parse
     
     This is a trivial regular-expression-based function code parser. It is not meant to parse
     all functions but to parse functions of the form:
       function( <parameters> ) {
         <some code with no return statement>
         
         return <return expression>
       }
       
     If it fails to parse the function it will return the function itself.
     
     If it succeeds it returns an Object with the following properties:
       - parameters: an Array of parameter names
       - code: <some code with no return statement>
       - condition: <return expression>
     
     Exemple:
     
     The following filter function:
       function (city, c, cities) {
         return city.country === 'USA';
       }
       
     Will be parsed and return:
       {
         parameters: [ "city", "c", "cities" ],
         code      : "",
         condition : "city.country === 'USA'"
       }
       
     Possible improvements:
       Proper AST parser:
         This could use the excellent Acorn (https://github.com/marijnh/acorn/)
         parser but uglified size is still significant for a compact parser:
          22759 bytes, and 9985 bytes gziped
         
         Speed considerations would most likely not be a problem since Acorn
         is one of the fastest parsers and function parsing would be done once
         after loading a script.
         
         This would allow for much more possibilities such as:
           - unrestricted complexity
           - variable name substitution to guaranty zero conflicts with
             generated code
           - evaluation to remove constant code
           - sandboxing, which could be useful to execute on the server
             filters coming from clients.
             
       Simplified AST parser:
         This would allow to generate query structures that could be transported
         to the server side.
  */
  function parse_filter( f ) {
    if ( typeof f !== 'function' ) return f;
    
    var s = f.toString();
    
    var parsed = /function\s*\(([^\)]*)\)\s*{\s*(.*)\s*return\s*([^;]*)[;\s]*}/.exec( s );
    
    if ( ! parsed || parsed.length < 4 ) return f;
    
    var parameters = parsed[ 1 ].replace( / /g, '' );
    
    parameters = parameters == '' ? [] : parameters.split( ',' );
    
    parsed = { parameters: parameters, code: parsed[ 2 ], condition: parsed[ 3 ], f: f };
    
    de&&ug( 'parse_filter(), parsed:' + log.s( parsed ) + ', function: ' + s );
    
    return parsed;
  } // parse_filter()
  
  /* -------------------------------------------------------------------------------------------
     filter( filter [, options ] )
     
     Filter a set by a filter function or query.
     
     Parameters:
       - filter: can be a Function, an Array or a Query Pipelet:
           (Function) signature:
             filter( value [, index [, values ] ] )
             
             If the filter function returns a "truly" value, the current value is
             "added" to the downstream pipelet.
             
           (Array of Objects): the filter is a static query, e.g.:
             states = [
               { country: 'USA', state 'Michigan' }
               { country: 'USA', state 'Illinois' }
             ];
             
             // Filter cities from the states of Michigan and Illinois
             cities.filter( states );
           
           (Pipelet): the filter is a query dataflow processed using filter_query(). This allows
             dynamic filters from dataflows.
             
             states = xs.set( [ { country: 'USA', state 'Michigan' } ] );
             
             // Filter cities from the state of Michigan
             cities.filter( states );
             
             // Add the state of Illinois
             states.add( [ { country: 'USA', state 'Illinois' } ] );
             
             // From now on, the above filter also provides the cities in Illinois in addition
             // to Michigan
             
             // ...
             
             states.remove( [ { country: 'USA', state 'Michigan' } ] )
             
             // Now the filter no longer provides cities from Michigan, and only cities from
             // Illinois are sent downtream
           
       - options (optional) (Object)
  */
  function Filter( filter, options ) {
    // !!! Call Pipelet constructor first to be able to overload _query in add_query_source()
    var that = Pipelet.call( this, options );
    
    switch ( typeof filter ) {
      case "function":
        this._filter = filter = parse_filter( filter );
      break;
      
      case "object":
        if ( filter instanceof Pipelet || filter instanceof Array ) {
          // This is a Query, which can be static (Array) or dynamic (Pipelet)
          
          // This pipelet becomes a pass-through
          this.add    = Pipelet.prototype.emit_add;
          this.remove = Pipelet.prototype.emit_remove;
          this.update = Pipelet.prototype.emit_update;
          
          // _transform is still required by fetch()
          this._transform = Pipelet.prototype._transform;
          
          this.add_query_source( filter );
          
          break;
        }
      // pass-though 
      default:
        throw new Error( "filter(), filter should be a function, a Query Pipelet, or a Query Array" );
    }
    
    return this;
  } // Filter()
  
  Pipelet.Build( 'filter', Filter, {
    _transform: function( objects ) {
      var filter = this._filter
        , vars = [ '_out = []' ]
        , first, u, index = 'i', objects_variable = '_o'
      ;
      
      switch( typeof filter ) {
        case 'object': // { parameters: [ 'o' ], code: 'o.country === "Morocco"', condition: '' }
          var p = filter.parameters;
          
          if ( p.length ) {
            if ( p.length > 1 ) index = p[ 1 ];
            if ( p.length > 2 ) objects_variable = p[ 2 ];
            
            var o = p[ 0 ];
            
            vars.push( o );
            
            first = o + ' = ' + objects_variable + '[ ++' + index + ' ]; ' + filter.code + ' if ( ' + filter.condition + ' ) _out.push( ' + o + ' );';
            
            break;
          }
          
          filter = filter.f;
        // fall-through
        
        case 'function':
          vars.push( 'f = filter', 'o' );
          
          first = 'if ( f( o = _o[ ++i ], i, _o ) ) _out.push( o );';
        break;
      }
      
      vars.push( index + ' = -1', 'l = ' + objects_variable + '.length' );
      
      eval( new Code()
        ._function( 'this._transform', null, [ objects_variable ] )
          ._var( vars )
          
          .unrolled_while( first, u, u, { index: index } )
          
          .add( 'return _out' )
        .end( 'Filter.._transform()' )
        .get()
      );
      
      return this._transform( objects );
    }, // _transform()
    
    // ToDo: update will mostly no longer being called, because Set does not implement update
    // This code is no-longer tested in the test suite, therefore consider removing this code
    update: function( updates, options ) {
      var filter = this._filter;
      
      switch( typeof filter ) {
        case 'object':
          filter = filter.f;
        // fall-through
        
        case 'function':
          this.update = function( updates ) {
            var l = updates.length, f = filter
              , removed = [], updated = [], added = []
              , more = options && options.more
            ;
            
            for ( var i = -1; ++i < l; ) {
              var u = updates[ i ], u0 = u[ 0 ], u1 = u[ 1 ];
              
              if ( f( u0 ) ) {
                if ( f( u1 ) ) {
                  updated.push( u );
                } else {
                  removed.push( u0 );
                }
              } else if ( f( u1 ) ) {
                added.push( u1 );
              }
            }
            
            return this.emit_operations( added, removed, updated, XS.only_more( options ) );
          };
          
          return this.update( updates );
        break;
      }
    } // update()
  } ); // Filter instance methods
  
  /* -------------------------------------------------------------------------------------------
     flow( 'name' )
     
     Filters a dataflow by the 'flow' attribute.
     
     Parameters:
       - name (String): the name of the flow to extract
  */
  Pipelet.Compose( 'flow', function( source, flow_name, options ) {
    return source.filter( [ { flow: flow_name } ], options );
  } );
  
  /* -------------------------------------------------------------------------------------------
     module exports
  */
  eval( XS.export_code( 'XS', [ 'Filter' ] ) );
  
  de&&ug( "module loaded" );
} )( this ); // filter.js
