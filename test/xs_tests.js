// Generated by CoffeeScript 1.4.0
(function() {
  var XS, chai, clone;

  clone = function(o) {
    var p, r;
    if (typeof o !== 'object' || o === null) {
      return o;
    }
    r = o instanceof Array ? [] : {};
    for (p in o) {
      if (o.hasOwnProperty(p)) {
        r[p] = clone(o[p]);
      }
    }
    return r;
  };

  describe('clone():', function() {
    var bar, foo;
    foo = {
      id: 10,
      array: [
        1, 2, "a", "b", 3, {
          x: 10,
          y: void 0,
          z: null
        }
      ],
      obj: {
        coordinate: 1,
        label: "Coordinate",
        values: [24, null, void 0]
      }
    };
    bar = clone(foo);
    return it('foo should be deep equal to bar', function() {
      return bar.should.be.eql(foo);
    });
  });

  XS = typeof require !== "undefined" && require !== null ? (require('../src/xs.js')).XS : this.XS;

  if (typeof require !== "undefined" && require !== null) {
    chai = require('chai');
  }

  if (chai != null) {
    chai.should();
  }

  describe('XS test suite:', function() {
    it('XS should be defined:', function() {
      return XS.should.exist;
    });
    describe('XS.extend():', function() {
      var extend, o1, o2, o3, _o2, _o3;
      extend = XS.extend;
      it('extend() should be a function', function() {
        return extend.should.be.a('function');
      });
      o1 = {
        id: 1,
        name: 'khalifa'
      };
      o2 = {
        email: 'knassik@gmail.com'
      };
      _o2 = clone(o2);
      o3 = {
        country: 'Morocco',
        name: 'khalifa nassik',
        email: 'khalifan@gmail.com'
      };
      _o3 = clone(o3);
      it('extend( object ) should be equal to object', function() {
        var result;
        result = extend(o1);
        return result.should.be.eql(o1);
      });
      it('extend( object1, object2 ) should be equal to object', function() {
        var result;
        result = extend(o1, o2);
        return result.should.be.eql({
          id: 1,
          name: 'khalifa',
          email: 'knassik@gmail.com'
        });
      });
      it('o2 should be deep equal to _o2', function() {
        return o2.should.be.eql(_o2);
      });
      it('extend( object1, object2, object3 ) should be equal to object', function() {
        var result;
        result = extend(o1, o2, o3);
        return result.should.be.eql({
          id: 1,
          name: 'khalifa nassik',
          email: 'khalifan@gmail.com',
          country: 'Morocco'
        });
      });
      it('o2 should be deep equal to _o2', function() {
        return o2.should.be.eql(_o2);
      });
      return it('o3 should be deep equal to _o3', function() {
        return o3.should.be.eql(_o3);
      });
    });
    describe('XS.subclass():', function() {
      var Animal, Snake, a, s, subclass;
      subclass = XS.subclass;
      it('subclass() should be a function', function() {
        return subclass.should.be.a('function');
      });
      Animal = function(name) {
        return this.name = name;
      };
      a = new Animal('Sam');
      it('a should be an instance of Animal', function() {
        return a.should.be.an["instanceof"](Animal);
      });
      Snake = function(name) {};
      subclass(Animal, Snake);
      s = new Snake("Barry the Snake");
      it('s should be an instance of Snake', function() {
        return s.should.be.an["instanceof"](Snake);
      });
      it('s should be an instance of Animal', function() {
        return s.should.be.an["instanceof"](Animal);
      });
      return it('a should not be an instance of Snake', function() {
        return a.should.not.be.an["instanceof"](Snake);
      });
    });
    describe('XS.Code():', function() {
      var code, i, test;
      code = new XS.Code('Code Test')["function"](null, 'f', []).add('var i').loop('i = -1', ' ++i < 10').end().add('return i').end().get();
      eval(code);
      i = f();
      it('f should be a function', function() {
        return f.should.be.a('function');
      });
      it('i should be equal to 10', function() {
        return i.should.be.eql(10);
      });
      test = 'a[ ++i ] === n';
      code = new XS.Code('Test unfolded while')["function"]('g = ', null, ['n']).vars(['a = [ 34, 65, 98, 8, 52, 10, 21, 13, 1, 90, 14 ]', 'l = a.length', 'i = -1']).unfolded_while('if ( ' + test, '|| ' + test, ') return i').add('return -1').end('').get();
      eval(code);
      it('the index of 34 should be 0', function() {
        return g(34).should.be.eql(0);
      });
      it('the index of 52 should be 4', function() {
        return g(52).should.be.eql(4);
      });
      it('the index of 90 should be 9', function() {
        return g(90).should.be.eql(9);
      });
      return it('the index of 1 should be 8', function() {
        return g(1).should.be.eql(8);
      });
    });
    return describe('XS.Set():', function() {
      var Set, cars, cities, employee, set;
      Set = XS.Set;
      set = new Set([]);
      it('set should be a Set', function() {
        return set.should.be.an["instanceof"](Set);
      });
      cities = new Set([
        {
          id: 1,
          name: "Marrakech",
          country: "Morocco"
        }, {
          id: 2,
          name: "Mountain View",
          country: "USA",
          state: "California"
        }, {
          id: 3,
          name: "Paris",
          country: "France"
        }
      ]);
      cars = new Set([
        {
          id: 1,
          brand: "Mercedes",
          model: "C Class"
        }, {
          id: 2,
          brand: "Mercedes",
          model: "S Class"
        }, {
          id: 3,
          brand: "BMW",
          model: "M Serie"
        }
      ], {
        key: ["id", "model"]
      });
      employee = new XS.Set([
        {
          id: 1,
          name: "Stephen C. Cox",
          salary: "$3000",
          customer_id: "222",
          order_id: "1222"
        }, {
          id: 2,
          name: "Josephin Tan",
          salary: "$1500",
          customer_id: "223",
          order_id: "1223"
        }, {
          id: 3,
          name: "Joyce Ming",
          salary: "$2000",
          customer_id: "224",
          order_id: "1224"
        }, {
          id: 4,
          name: "James A. Pentel",
          salary: "$1750",
          customer_id: "225",
          order_id: "1225"
        }, {
          id: 5,
          name: "Alex Frog",
          salary: "$3000",
          customer_id: "226",
          order_id: "1226"
        }, {
          id: 6,
          name: "Tim Hancook",
          salary: "$1500",
          customer_id: "227",
          order_id: "1227"
        }
      ]);
      describe('add():', function() {
        var result;
        cities.add([
          {
            id: 4,
            name: "Berlin",
            country: "Germany"
          }
        ]);
        it('cities.add( object ) should be a Set', function() {
          return cities.should.be.an["instanceof"](Set);
        });
        result = new Set([
          {
            id: 1,
            name: "Marrakech",
            country: "Morocco"
          }, {
            id: 2,
            name: "Mountain View",
            country: "USA",
            state: "California"
          }, {
            id: 3,
            name: "Paris",
            country: "France"
          }, {
            id: 4,
            name: "Berlin",
            country: "Germany"
          }
        ]);
        return it('cities.add( object ) should be equal to result', function() {
          return cities.should.be.eql(result);
        });
      });
      describe('index_of():', function() {
        it('set.index_of( { id: 2 } ) should be -1: empty set', function() {
          return set.index_of({
            id: 2
          }).should.be.eql(-1);
        });
        it('cities.index_of( { id: 2 } ) should be 1', function() {
          return cities.index_of({
            id: 2
          }).should.be.eql(1);
        });
        it('cars.index_of( { id: 2, model: "S Class" } ) should be 1', function() {
          return cars.index_of({
            id: 2,
            model: "S Class"
          }).should.be.eql(1);
        });
        return it('cars.index_of( { id: 3, model: "S Class" } ) should be -1: not found', function() {
          return cars.index_of({
            id: 3,
            model: "S Class"
          }).should.be.eql(-1);
        });
      });
      describe('remove():', function() {
        it('set.remove( { id: 1 } ) should be equal to set: empty set', function() {
          return set.remove({
            id: 1
          }).a.should.be.eql(set.a);
        });
        it('employee.remove( { id: 15 } ) should be equal to employee: record with id 15 doesn\'t exist', function() {
          employee.remove({
            id: 15
          });
          return employee.a.should.be.equal(employee.a);
        });
        it('employee.remove( { id: 1 } ) should be equal to result: first record', function() {
          var result;
          result = new Set([
            {
              id: 2,
              name: "Josephin Tan",
              salary: "$1500",
              customer_id: "223",
              order_id: "1223"
            }, {
              id: 3,
              name: "Joyce Ming",
              salary: "$2000",
              customer_id: "224",
              order_id: "1224"
            }, {
              id: 4,
              name: "James A. Pentel",
              salary: "$1750",
              customer_id: "225",
              order_id: "1225"
            }, {
              id: 5,
              name: "Alex Frog",
              salary: "$3000",
              customer_id: "226",
              order_id: "1226"
            }, {
              id: 6,
              name: "Tim Hancook",
              salary: "$1500",
              customer_id: "227",
              order_id: "1227"
            }
          ]);
          employee.remove({
            id: 1
          });
          return employee.a.should.be.eql(result.a);
        });
        it('employee.remove( { id: 5 } ) should be equal to result: record in the middle', function() {
          var result;
          result = new Set([
            {
              id: 2,
              name: "Josephin Tan",
              salary: "$1500",
              customer_id: "223",
              order_id: "1223"
            }, {
              id: 3,
              name: "Joyce Ming",
              salary: "$2000",
              customer_id: "224",
              order_id: "1224"
            }, {
              id: 4,
              name: "James A. Pentel",
              salary: "$1750",
              customer_id: "225",
              order_id: "1225"
            }, {
              id: 6,
              name: "Tim Hancook",
              salary: "$1500",
              customer_id: "227",
              order_id: "1227"
            }
          ]);
          employee.remove({
            id: 5
          });
          return employee.a.should.be.eql(result.a);
        });
        return it('employee.remove( { id: 6 } ) should be equal to result: last record', function() {
          var result;
          result = new Set([
            {
              id: 2,
              name: "Josephin Tan",
              salary: "$1500",
              customer_id: "223",
              order_id: "1223"
            }, {
              id: 3,
              name: "Joyce Ming",
              salary: "$2000",
              customer_id: "224",
              order_id: "1224"
            }, {
              id: 4,
              name: "James A. Pentel",
              salary: "$1750",
              customer_id: "225",
              order_id: "1225"
            }
          ]);
          employee.remove({
            id: 6
          });
          return employee.a.should.be.eql(result.a);
        });
      });
      return describe('update():', function() {
        it('set.update( { id: 1 } ) should be equal to set: empty set', function() {
          return set.update({
            id: 1
          }).a.should.be.eql(set.a);
        });
        it('employee.update( { id: 15, name: "Khalifa P Nassik", Salary: "$1500" } ) should be equal to employee: record with id 15 doesn\'t exist', function() {
          employee.update({
            id: 15,
            name: "Khalifa P Nassik",
            Salary: "$1500"
          });
          return employee.a.should.be.equal(employee.a);
        });
        return it('employee.update( { id: 3, name: "Khalifa P Nassik", Salary: "$1500", customer_id: "224", order_id: "1224" } ) should be equal to result', function() {
          var result;
          result = new Set([
            {
              id: 2,
              name: "Josephin Tan",
              salary: "$1500",
              customer_id: "223",
              order_id: "1223"
            }, {
              id: 3,
              name: "Khalifa P Nassik",
              Salary: "$1500",
              customer_id: "224",
              order_id: "1224"
            }, {
              id: 4,
              name: "James A. Pentel",
              salary: "$1750",
              customer_id: "225",
              order_id: "1225"
            }
          ]);
          employee.update({
            id: 3,
            name: "Khalifa P Nassik",
            Salary: "$1500",
            customer_id: "224",
            order_id: "1224"
          });
          return employee.a.should.be.eql(result.a);
        });
      });
    });
  });

}).call(this);
