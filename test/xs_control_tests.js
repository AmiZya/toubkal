// Generated by CoffeeScript 1.4.0

/*
    xs_control_tests.coffee

    Copyright (C) 2013, Connected Sets

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as
    published by the Free Software Foundation, either version 3 of the
    License, or (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License for more details.

    You should have received a copy of the GNU Affero General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var XS, chai, options, organizer, radio, radio_source, xs;

  XS = typeof require !== "undefined" && require !== null ? (require('../lib/xs.js')).XS : this.XS;

  if (typeof require !== "undefined" && require !== null) {
    require('../lib/code.js');
    require('../lib/pipelet.js');
    require('../lib/filter.js');
    require('../lib/order.js');
    require('../lib/aggregate.js');
    require('../lib/table.js');
    require('../lib/control.js');
  }

  if (typeof require !== "undefined" && require !== null) {
    chai = require('chai');
  }

  if (chai != null) {
    chai.should();
  }

  xs = XS.xs;

  organizer = [
    {
      id: "label"
    }
  ];

  options = {
    label: "Charts"
  };

  radio_source = xs.order(organizer, {
    name: "Radio Source"
  });

  radio = radio_source.radio(document.getElementById("radio_control"), organizer);

  /*
  describe 'Checkbox():', ->
    it 'checkbox should be empty', ->
      checkbox.get().should.be.empty
    
    describe 'add():', ->
      it 'after checkbox_source.add( object ), checkbox_source should be equal to [ { id: true, label: "Label True" } ]', ->
        checkbox_source.add [ { id: true, label: "Label True" } ]
        
        checkbox_source.get().should.be.eql [ { id: true, label: "Label True" } ]
      
      it 'after checkbox_source.add( object ), checkbox should be equal to [ { id: true, label: "Label True" } ]', ->
        checkbox.get().should.be.eql [ { id: true, label: "Label True" } ]
      
      it 'after checkbox_source.add( object ), checkbox should be equal to [ { id: false, label: "Label False" }, { id: true, label: "Label True" } ]', ->
        checkbox_source.add [ { id: false, label: "Label False" } ]
        
        checkbox.get().should.be.eql [ { id: true, label: "Label True" } ]
      
    describe 'update():', ->
      it 'after checkbox_source.update( objects ) checkbox should be equal to [ { id: false, label: "Charts" }, { id: true, label: "Charts" } ]', ->
        checkbox_source.update [
          [ { id: true, label: "Label True" }, { id: true, label: "Charts" } ]
          [ { id: false, label: "Label False" }, { id: false, label: "Charts" } ]
        ]
        
        checkbox.get().should.be.eql [ { id: true, label: "Charts" } ]
    
    describe 'remove():', ->
      it 'after checkbox_source.remove( object ), checkbox should be equal to [ { id: true, label: "Charts" } ]', ->
        checkbox_source.remove [ { id: false, label: "Charts" } ]
        
        checkbox.get().should.be.eql [ { id: true, label: "Charts" } ]
      
      it 'after checkbox_source.remove( object ), checkbox should be empty', ->
        checkbox_source.remove [ { id: true, label: "Charts" } ]
        
        checkbox.get().should.be.empty
  
  describe 'Checkbox_Group():', ->
    it 'checkbox_group should be empty', ->
      
      checkbox_group.get().should.be.empty
    
    it 'after checkbox_group_source.add( objects ), checkbox_group should be equal to result', ->
      checkbox_group_source.add [
        { id: 1, label: "Photography"            , checked: true }
        { id: 2, label: "Fishing"                                }
        { id: 3, label: "Playing Computer Games"                 }
        { id: 4, label: "Traveling"              , checked: true }
        { id: 5, label: "Cooking"                                }
        { id: 6, label: "Stamp / Coin Collection", checked: true }
      ]
      
      checkbox_group.get().should.be.eql [
        { id: 1, label: "Photography"            , checked: true }
        { id: 4, label: "Traveling"              , checked: true }
        { id: 6, label: "Stamp / Coin Collection", checked: true }
      ]
    
    it 'after checkbox_group_source.remove( objects ), checkbox_group should be equal to result', ->
      checkbox_group_source.remove [
        { id: 3, label: "Playing Computer Games"                }
        { id: 4, label: "Traveling"             , checked: true }
      ]
      
      checkbox_group.get().should.be.eql [
        { id: 1, label: "Photography"            , checked: true }
        { id: 6, label: "Stamp / Coin Collection", checked: true }
      ]
    
    it 'after checkbox_group_source.add( object ), checkbox_group should be equal to result', ->
      checkbox_group_source.add [ { id: 7, label: "Pottery", checked: true }, { id: 8, label: "Gardening" } ]
      
      checkbox_group.get().should.be.eql [
        { id: 1, label: "Photography"            , checked: true }
        { id: 6, label: "Stamp / Coin Collection", checked: true }
        { id: 7, label: "Pottery"                , checked: true }
      ]
    
    it 'after checkbox_group_source.update( objects ), checkbox_group should be equal to result', ->
      checkbox_group_source.update [
        [ { id: 3, label: "Playing Computer Games" }, { id: 3, label: "Playing Video Games" } ]
        [ { id: 7, label: "Pottery", checked: true }, { id: 7, label: "Pottery", checked: false } ]
        [ { id: 8, label: "Gardening" }, { id: 8, label: "Gardening and Plants", checked: true } ]
      ]
      
      checkbox_group.get().should.be.eql [
        { id: 1, label: "Photography"            , checked: true }
        { id: 6, label: "Stamp / Coin Collection", checked: true }
        #{ id: 7, label: "Pottery"                , checked: true }
        { id: 8, label: "Gardening and Plants"   , checked: true }
      ]
  */


  describe('Radio():', function() {
    it('radio should be empty', function() {
      return radio.get().should.be.empty;
    });
    return it('after radio_source.add( objects ), radio should be equal to [ { id: 1, label: "Islam", checked: true } ]', function() {
      radio_source.add([
        {
          id: 1,
          label: "Islam",
          checked: true
        }, {
          id: 2,
          label: "Christianity"
        }, {
          id: 3,
          label: "Judaism"
        }, {
          id: 6,
          label: "Satanism"
        }, {
          id: 7,
          label: "Atheism"
        }, {
          id: 8,
          label: "Rastafari"
        }
      ]);
      return radio.get().should.be.eql([
        {
          id: 1,
          label: "Islam",
          checked: true
        }
      ]);
    });
    /*
      it 'after radio_source.remove( objects ), radio should be equal to [ { id: 1, label: "Islam", checked: true } ]', ->
        radio_source.remove [ { id: 6, label: "Satanism" } ]
        
        radio.get().should.be.eql [ { id: 1, label: "Islam", checked: true } ]
      
      it 'after radio_source.add( objects ), radio should be equal to [ { id: 1, label: "Islam", checked: true } ]', ->
        radio_source.add [
          { id: 5, label: "Hinduism"     }
        ]
        
        radio.get().should.be.eql [ { id: 1, label: "Islam", checked: true } ]
      
      it 'after radio_source.update( objects ), radio should be equal to [ { id: 8, label: "Rastafari", checked: true } ]', ->
        radio_source.update [
          [ { id: 5, label: "Hinduism" }, { id: 5, label: "Buddhism" } ]
          #[ { id: 8, label: "Rastafari" }, { id: 4, label: "Rastafari" } ]
          #[ { id: 1, label: "Islam", checked: true }, { id: 1, label: "Islam", checked: false } ]
        ]
        
        radio.get().should.be.eql [ { id: 1, label: "Islam", checked: true } ]
    
    describe 'Drop_Down():', ->
      it 'drop_down should be empty', ->
      
        drop_down.get().should.be.empty
      
      it 'after drop_down_source.add( objects ), drop_down should be equal to [ { id: 1, label: "USA" } ]', ->
        drop_down_source.add [
          { id: 1, label: "USA"        }
          { id: 2, label: "Morocco"    }
          { id: 3, label: "France"     }
          { id: 4, label: "Japan"      }
          { id: 5, label: "Spain"      }
          { id: 6, label: "Portugal"   }
          { id: 8, label: "Madagascar" }
        ]
        
        drop_down.get().should.be.eql [ { id: 3, label: "France" } ]  
      
      it 'after drop_down_source.remove( objects ), drop_down should be equal to [ { id: 1, label: "USA" } ]', ->
        drop_down_source.remove [
          { id: 2, label: "Morocco" }
          { id: 5, label: "Spain"   }
        ]
        
        drop_down.get().should.be.eql [ { id: 3, label: "France" } ]
      
      it 'after drop_down_source.remove( objects ), drop_down should be equal to [ { id: 4, label: "Japan" } ]: remove selected object', ->
        drop_down_source.remove [
          { id: 3, label: "France" }
        ]
        
        drop_down.get().should.be.eql [ { id: 4, label: "Japan" } ]
      
      it 'after drop_down_source.add( object ), drop_down should be equal to [ { id: 4, label: "Japan" } ]', ->
        drop_down_source.add [ { id: 7, label: "China" } ]
      
        drop_down.get().should.be.eql [ { id: 4, label: "Japan" } ]
      
      it 'after drop_down_source.update( objects ), drop_down should be equal to [ { id: 7, label: "Madagascar" } ]', ->
        drop_down_source.update [
          [ { id: 8, label: "Madagascar" }, { id: 8, label: "Madagascar", selected: true } ]
          [ { id: 6, label: "Portugal"   }, { id: 5, label: "Germany" } ]
          [ { id: 4, label: "Japan"      }, { id: 4, label: "Italy" } ]
        ]
        
        drop_down.get().should.be.eql [ { id: 8, label: "Madagascar", selected: true } ]
    */

  });

}).call(this);
